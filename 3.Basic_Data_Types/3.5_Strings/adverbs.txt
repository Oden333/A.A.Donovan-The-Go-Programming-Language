| Тип данных       | Формат     | Adverbs (флаги)               | Примеры использования             | Описание                                                                |
|------------------|------------|-------------------------------|-----------------------------------|-------------------------------------------------------------------------|
| **Общие**        | `%v`       | `+` `#` ` ` `0` `-` `*`       | `%+v`, `%#v`, `% v`, `%05v`       | Универсальный формат (выводит значение в default формате)               |
|                  | `%T`       | -                             | `%T`                              | Выводит тип переменной (не значение)                                    |
| **Логические**   | `%t`       | ` ` `0` `-` `*`               | `%t`, `%5t`, `%-5t`               | `true`/`false`                                                          |
| **Целые**        | `%b`       | `+` ` ` `0` `-` `*`           | `%+b`, `%08b`, `%-8b`             | Двоичное представление                                                  |
|                  | `%d`       | `+` ` ` `0` `-` `*`           | `%+d`, `%05d`, `%-5d`             | Десятичное число                                                        |
|                  | `%o`       | `+` ` ` `0` `-` `*` `#`       | `%#o`, `%+05o`                    | Восьмеричное (с `#` добавляет префикс `0`)                              |
|                  | `%x`/`%X`  | `+` ` ` `0` `-` `*` `#`       | `%#x`, `%08X`                     | Шестнадцатеричное (с `#` добавляет `0x`)                                |
|                  | `%c`       | ` ` `0` `-` `*`               | `%c`, `%5c`                       | Символ по коду Unicode                                                  |
|                  | `%U`       | `+` ` ` `#`                   | `%#U`, `%+U`                      | Unicode формат (`U+1234`, с `#` выводит символ)                         |
| **Строки**       | `%s`       | ` ` `0` `-` `*` `.`           | `%s`, `%10s`, `%-10.5s`           | Строка (`.5` — макс. длина)                                             |
|                  | `%q`       | ` ` `0` `-` `*` `.`           | `%q`, `%10q`                      | Строка в кавычках с экранированием                                      |
|                  | `%x`/`%X`  | ` ` `0` `-` `*`               | `%x`, `%10X`                      | HEX-дамп строки (байты)                                                 |
| **Флоаты**       | `%f`       | `+` ` ` `0` `-` `*` `.`       | `%+f`, `%10.2f`, `%-08.3f`        | Десятичная дробь                                                        |
|                  | `%e`/`%E`  | `+` ` ` `0` `-` `*` `.`       | `%+.2e`, `%10E`                   | Экспоненциальная запись                                                 |
|                  | `%g`/`%G`  | `+` ` ` `0` `-` `*` `.`       | `%g`, `%+.5G`                     | Автовыбор между `%f` и `%e`                                             |
| **Указатели**    | `%p`       | ` ` `0` `-` `*` `#`           | `%p`, `%#p`                       | Адрес указателя (шестнадцатеричный)                                     |
| **Специальные**  | `%%`       | -                             | `%%`                              | Выводит знак `%`                                                        |

### **Ключевые Adverbs (флаги):**
1. `+` — всегда выводить знак (`+`/`-`)  
   Пример: `%+d` → `+42`  
2. ` ` (пробел) — добавлять пробел вместо `+` для положительных чисел  
   Пример: `% d` → ` 42`  
3. `0` — заполнять нулями слева  
   Пример: `%05d` → `00042`  
4. `-` — выравнивать по левому краю  
   Пример: `%-5s` → `"hello "`  
5. `*` — динамическая ширина/точность (берётся из аргументов)  
   Пример: `%*.*f`, `5`, `2`, `3.1415` → ` 3.14`  
6. `#` — альтернативный формат:  
   - `%#x` → `0x2a`  
   - `%#o` → `052`  
   - `%#v` → печатает значение в синтаксисе Go  
7. `.N` — точность (для чисел — кол-во знаков, для строк — макс. длина)  
   Пример: `%.2f` → `3.14`, `%.3s` → `"hel"`  

### **Примеры комбинаций:**
```go
fmt.Printf("|%+10.2f|", 3.1415)  // |     +3.14| (знак, ширина 10, 2 знака)
fmt.Printf("|%-10s|", "Go")       // |Go        | (выравнивание влево)
fmt.Printf("|%05d|", 42)          // |00042|    (заполнение нулями)
fmt.Printf("%#v", "Hello\t")      // "Hello\t"  (Go-синтаксис)
```

Для строк особенно полезны `%-*s` (динамическая ширина) и `%.*s` (динамическая обрезка).